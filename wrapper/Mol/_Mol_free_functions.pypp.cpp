// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "_Mol_free_functions.pypp.hpp"

namespace bp = boost::python;

#include "SireMaths/align.h"

#include "SireMaths/axisset.h"

#include "SireMaths/matrix.h"

#include "SireMaths/quaternion.h"

#include "SireMaths/rotate.h"

#include "SireMaths/vectorproperty.h"

#include "SireMol/errors.h"

#include "SireUnits/units.h"

#include "SireVol/coordgroup.h"

#include "SireVol/space.h"

#include "angleid.h"

#include "atomcoords.h"

#include "atommatcher.h"

#include "atommatchers.h"

#include "bondid.h"

#include "connectivity.h"

#include "dihedralid.h"

#include "improperid.h"

#include "mover.h"

#include "tostring.h"

#include "weightfunction.h"

#include "mover.h"

#include "SireMaths/align.h"

#include "SireMaths/axisset.h"

#include "SireMaths/matrix.h"

#include "SireMaths/quaternion.h"

#include "SireMaths/rotate.h"

#include "SireMaths/vectorproperty.h"

#include "SireMol/errors.h"

#include "SireUnits/units.h"

#include "SireVol/coordgroup.h"

#include "SireVol/space.h"

#include "angleid.h"

#include "atomcoords.h"

#include "atommatcher.h"

#include "atommatchers.h"

#include "bondid.h"

#include "connectivity.h"

#include "dihedralid.h"

#include "improperid.h"

#include "mover.h"

#include "tostring.h"

#include "weightfunction.h"

#include "mover.h"

#include "SireMaths/align.h"

#include "SireMaths/axisset.h"

#include "SireMaths/matrix.h"

#include "SireMaths/quaternion.h"

#include "SireMaths/rotate.h"

#include "SireMaths/vectorproperty.h"

#include "SireMol/errors.h"

#include "SireUnits/units.h"

#include "SireVol/coordgroup.h"

#include "SireVol/space.h"

#include "angleid.h"

#include "atomcoords.h"

#include "atommatcher.h"

#include "atommatchers.h"

#include "bondid.h"

#include "connectivity.h"

#include "dihedralid.h"

#include "improperid.h"

#include "mover.h"

#include "tostring.h"

#include "weightfunction.h"

#include "mover.h"

#include "SireMaths/align.h"

#include "SireMaths/axisset.h"

#include "SireMaths/matrix.h"

#include "SireMaths/quaternion.h"

#include "SireMaths/rotate.h"

#include "SireMaths/vectorproperty.h"

#include "SireMol/errors.h"

#include "SireUnits/units.h"

#include "SireVol/coordgroup.h"

#include "SireVol/space.h"

#include "angleid.h"

#include "atomcoords.h"

#include "atommatcher.h"

#include "atommatchers.h"

#include "bondid.h"

#include "connectivity.h"

#include "dihedralid.h"

#include "improperid.h"

#include "mover.h"

#include "tostring.h"

#include "weightfunction.h"

#include "mover.h"

#include "SireMaths/align.h"

#include "SireMaths/axisset.h"

#include "SireMaths/matrix.h"

#include "SireMaths/quaternion.h"

#include "SireMaths/rotate.h"

#include "SireMaths/vectorproperty.h"

#include "SireMol/errors.h"

#include "SireUnits/units.h"

#include "SireVol/coordgroup.h"

#include "SireVol/space.h"

#include "angleid.h"

#include "atomcoords.h"

#include "atommatcher.h"

#include "atommatchers.h"

#include "bondid.h"

#include "connectivity.h"

#include "dihedralid.h"

#include "improperid.h"

#include "mover.h"

#include "tostring.h"

#include "weightfunction.h"

#include "mover.h"

#include "SireMaths/align.h"

#include "SireMaths/axisset.h"

#include "SireMaths/matrix.h"

#include "SireMaths/quaternion.h"

#include "SireMaths/rotate.h"

#include "SireMaths/vectorproperty.h"

#include "SireMol/errors.h"

#include "SireUnits/units.h"

#include "SireVol/coordgroup.h"

#include "SireVol/space.h"

#include "angleid.h"

#include "atomcoords.h"

#include "atommatcher.h"

#include "atommatchers.h"

#include "bondid.h"

#include "connectivity.h"

#include "dihedralid.h"

#include "improperid.h"

#include "mover.h"

#include "tostring.h"

#include "weightfunction.h"

#include "mover.h"

void register_free_functions(){

    { //::SireMol::getAlignment
    
        typedef ::SireMaths::Transform ( *getAlignment_function_type )( ::SireMol::MoleculeView const &,::SireMol::MoleculeView const &,bool );
        getAlignment_function_type getAlignment_function_value( &::SireMol::getAlignment );
        
        bp::def( 
            "getAlignment"
            , getAlignment_function_value
            , ( bp::arg("view0"), bp::arg("view1"), bp::arg("fit")=(bool)(true) )
            , "" );
    
    }

    { //::SireMol::getAlignment
    
        typedef ::SireMaths::Transform ( *getAlignment_function_type )( ::SireMol::MoleculeView const &,::SireMol::MoleculeView const &,::SireBase::PropertyMap const &,bool );
        getAlignment_function_type getAlignment_function_value( &::SireMol::getAlignment );
        
        bp::def( 
            "getAlignment"
            , getAlignment_function_value
            , ( bp::arg("view0"), bp::arg("view1"), bp::arg("map"), bp::arg("fit")=(bool)(true) )
            , "" );
    
    }

    { //::SireMol::getAlignment
    
        typedef ::SireMaths::Transform ( *getAlignment_function_type )( ::SireMol::MoleculeView const &,::SireBase::PropertyMap const &,::SireMol::MoleculeView const &,::SireBase::PropertyMap const &,bool );
        getAlignment_function_type getAlignment_function_value( &::SireMol::getAlignment );
        
        bp::def( 
            "getAlignment"
            , getAlignment_function_value
            , ( bp::arg("view0"), bp::arg("map0"), bp::arg("view1"), bp::arg("map1"), bp::arg("fit")=(bool)(true) )
            , "" );
    
    }

    { //::SireMol::getAlignment
    
        typedef ::SireMaths::Transform ( *getAlignment_function_type )( ::SireMol::MoleculeView const &,::SireMol::MoleculeView const &,::SireMol::AtomMatcher const &,bool );
        getAlignment_function_type getAlignment_function_value( &::SireMol::getAlignment );
        
        bp::def( 
            "getAlignment"
            , getAlignment_function_value
            , ( bp::arg("view0"), bp::arg("view1"), bp::arg("matcher"), bp::arg("fit")=(bool)(true) )
            , "" );
    
    }

    { //::SireMol::getAlignment
    
        typedef ::SireMaths::Transform ( *getAlignment_function_type )( ::SireMol::MoleculeView const &,::SireMol::MoleculeView const &,::SireMol::AtomMatcher const &,::SireBase::PropertyMap const &,bool );
        getAlignment_function_type getAlignment_function_value( &::SireMol::getAlignment );
        
        bp::def( 
            "getAlignment"
            , getAlignment_function_value
            , ( bp::arg("view0"), bp::arg("view1"), bp::arg("matcher"), bp::arg("map"), bp::arg("fit")=(bool)(true) )
            , "" );
    
    }

    { //::SireMol::getAlignment
    
        typedef ::SireMaths::Transform ( *getAlignment_function_type )( ::SireMol::MoleculeView const &,::SireBase::PropertyMap const &,::SireMol::MoleculeView const &,::SireBase::PropertyMap const &,::SireMol::AtomMatcher const &,bool );
        getAlignment_function_type getAlignment_function_value( &::SireMol::getAlignment );
        
        bp::def( 
            "getAlignment"
            , getAlignment_function_value
            , ( bp::arg("view0"), bp::arg("map0"), bp::arg("view1"), bp::arg("map1"), bp::arg("matcher"), bp::arg("fit")=(bool)(true) )
            , "" );
    
    }

}
