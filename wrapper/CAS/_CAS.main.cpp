// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License


#include "boost/python.hpp"

#include "Helpers/clone_const_reference.hpp"

#include "Abs.pypp.hpp"

#include "AlwaysFalse.pypp.hpp"

#include "AlwaysTrue.pypp.hpp"

#include "ArcCos.pypp.hpp"

#include "ArcCosh.pypp.hpp"

#include "ArcCot.pypp.hpp"

#include "ArcCoth.pypp.hpp"

#include "ArcCsc.pypp.hpp"

#include "ArcCsch.pypp.hpp"

#include "ArcSec.pypp.hpp"

#include "ArcSech.pypp.hpp"

#include "ArcSin.pypp.hpp"

#include "ArcSinh.pypp.hpp"

#include "ArcTan.pypp.hpp"

#include "ArcTanh.pypp.hpp"

#include "ComplexPower.pypp.hpp"

#include "ComplexValues.pypp.hpp"

#include "Condition.pypp.hpp"

#include "Conditional.pypp.hpp"

#include "Constant.pypp.hpp"

#include "Cos.pypp.hpp"

#include "Cosh.pypp.hpp"

#include "Cot.pypp.hpp"

#include "Coth.pypp.hpp"

#include "Csc.pypp.hpp"

#include "Csch.pypp.hpp"

#include "DoubleFunc.pypp.hpp"

#include "EqualTo.pypp.hpp"

#include "ExBase.pypp.hpp"

#include "Exp.pypp.hpp"

#include "Expression.pypp.hpp"

#include "ExpressionBase.pypp.hpp"

#include "ExpressionProperty.pypp.hpp"

#include "Factor.pypp.hpp"

#include "GreaterOrEqualThan.pypp.hpp"

#include "GreaterThan.pypp.hpp"

#include "I.pypp.hpp"

#include "Identities.pypp.hpp"

#include "IntegerPower.pypp.hpp"

#include "IntegrationConstant.pypp.hpp"

#include "LessOrEqualThan.pypp.hpp"

#include "LessThan.pypp.hpp"

#include "Ln.pypp.hpp"

#include "Max.pypp.hpp"

#include "Min.pypp.hpp"

#include "NotEqualTo.pypp.hpp"

#include "Power.pypp.hpp"

#include "PowerConstant.pypp.hpp"

#include "PowerFunction.pypp.hpp"

#include "Product.pypp.hpp"

#include "RationalPower.pypp.hpp"

#include "RealPower.pypp.hpp"

#include "Sec.pypp.hpp"

#include "Sech.pypp.hpp"

#include "Sin.pypp.hpp"

#include "SingleFunc.pypp.hpp"

#include "Sinh.pypp.hpp"

#include "Sum.pypp.hpp"

#include "Symbol.pypp.hpp"

#include "SymbolComplex.pypp.hpp"

#include "SymbolExpression.pypp.hpp"

#include "SymbolValue.pypp.hpp"

#include "Tan.pypp.hpp"

#include "Tanh.pypp.hpp"

#include "Values.pypp.hpp"

#include "_CAS_free_functions.pypp.hpp"

namespace bp = boost::python;

#include "SireCAS_containers.h"

#include "SireCAS_registrars.h"

#include <QVector>

#include <QList>

#include <QHash>

#include "SireCAS/expression.h"

#include "SireCAS/symbol.h"

#include "SireCAS/symbolvalue.h"

#include "SireCAS/values.h"

#include "SireCAS/identities.h"

#include "SireCAS/complexvalues.h"

BOOST_PYTHON_MODULE(_CAS){
    register_SireCAS_objects();

    register_SireCAS_containers();

    register_ExBase_class();

    register_SingleFunc_class();

    register_Abs_class();

    register_Condition_class();

    register_AlwaysFalse_class();

    register_AlwaysTrue_class();

    register_ArcCos_class();

    register_ArcCosh_class();

    register_ArcCot_class();

    register_ArcCoth_class();

    register_ArcCsc_class();

    register_ArcCsch_class();

    register_ArcSec_class();

    register_ArcSech_class();

    register_ArcSin_class();

    register_ArcSinh_class();

    register_ArcTan_class();

    register_ArcTanh_class();

    register_PowerFunction_class();

    register_ComplexPower_class();

    register_ComplexValues_class();

    register_Conditional_class();

    register_Constant_class();

    register_Cos_class();

    register_Cosh_class();

    register_Cot_class();

    register_Coth_class();

    register_Csc_class();

    register_Csch_class();

    register_DoubleFunc_class();

    register_EqualTo_class();

    register_Exp_class();

    register_Expression_class();

    register_ExpressionBase_class();

    register_ExpressionProperty_class();

    register_Factor_class();

    register_GreaterOrEqualThan_class();

    register_GreaterThan_class();

    register_I_class();

    register_Identities_class();

    register_IntegerPower_class();

    register_Symbol_class();

    register_IntegrationConstant_class();

    register_LessOrEqualThan_class();

    register_LessThan_class();

    register_Ln_class();

    register_Max_class();

    register_Min_class();

    register_NotEqualTo_class();

    register_Power_class();

    register_PowerConstant_class();

    register_Product_class();

    register_RationalPower_class();

    register_RealPower_class();

    register_Sec_class();

    register_Sech_class();

    register_Sin_class();

    register_Sinh_class();

    register_Sum_class();

    register_SymbolComplex_class();

    register_SymbolExpression_class();

    register_SymbolValue_class();

    register_Tan_class();

    register_Tanh_class();

    register_Values_class();

    bp::implicitly_convertible< SireCAS::SymbolComplex, SireCAS::ComplexValues >();

    bp::implicitly_convertible< QList<SireCAS::SymbolComplex>, SireCAS::ComplexValues >();

    bp::implicitly_convertible< QHash<SireCAS::Symbol,SireMaths::Complex>, SireCAS::ComplexValues >();

    bp::implicitly_convertible< SireCAS::ExBase, SireCAS::Expression >();

    bp::implicitly_convertible< QList<SireCAS::SymbolExpression>, SireCAS::Identities >();

    bp::implicitly_convertible< QHash<SireCAS::Symbol,SireCAS::Expression>, SireCAS::Identities >();

    bp::implicitly_convertible< SireCAS::SymbolExpression, SireCAS::Identities >();

    bp::implicitly_convertible< QList<SireCAS::SymbolValue>, SireCAS::Values >();

    bp::implicitly_convertible< QHash<SireCAS::Symbol,double>, SireCAS::Values >();

    bp::implicitly_convertible< SireCAS::SymbolValue, SireCAS::Values >();

    bp::implicitly_convertible< double, SireCAS::Expression >();

    register_free_functions();
}

