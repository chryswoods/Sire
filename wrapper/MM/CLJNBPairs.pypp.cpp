// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "CLJNBPairs.pypp.hpp"

namespace bp = boost::python;

#include "SireStream/datastream.h"

#include "cljnbpairs.h"

#include "cljnbpairs.h"

SireMM::CLJNBPairs __copy__(const SireMM::CLJNBPairs &other){ return SireMM::CLJNBPairs(other); }

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

void register_CLJNBPairs_class(){

    { //::SireMM::CLJNBPairs
        typedef bp::class_< SireMM::CLJNBPairs, bp::bases< SireMM::AtomPairs<SireMM::CLJScaleFactor>, SireMol::MoleculeProperty, SireMol::MolViewProperty, SireBase::Property > > CLJNBPairs_exposer_t;
        CLJNBPairs_exposer_t CLJNBPairs_exposer = CLJNBPairs_exposer_t( "CLJNBPairs", "This class holds all of the non-bonded scale factors that are used\nto scale the intramolecular atom-atom coulomb and Lennard-Jones\ninteractions between pairs of atoms, e.g. for most MM forcefields,\nthe scale factors for 1-1, 1-2 and 1-3 pairs are zero, the\n1-4 pairs are scaled by a coulomb and LJ factor (e.g. 0.5 for OPLS)\nand the 1-5 and above pairs are not scaled (i.e. the coulomb and\nLJ factors equal 1)\n\nAuthor: Christopher Woods\n", bp::init< >("Null constructor") );
        bp::scope CLJNBPairs_scope( CLJNBPairs_exposer );
        CLJNBPairs_exposer.def( bp::init< SireMol::MoleculeView const &, bp::optional< SireMM::CLJScaleFactor const & > >(( bp::arg("molview"), bp::arg("default_scale")=SireMM::CLJScaleFactor(1, 1) ), "Construct for the molecule viewed in molview") );
        CLJNBPairs_exposer.def( bp::init< SireMol::MoleculeInfoData const &, bp::optional< SireMM::CLJScaleFactor const & > >(( bp::arg("molinfo"), bp::arg("default_scale")=SireMM::CLJScaleFactor(1, 1) ), "Construct, using default_scale for all of the atom-atom\ninteractions in the molecule molinfo") );
        CLJNBPairs_exposer.def( bp::init< SireMM::CLJNBPairs const & >(( bp::arg("other") ), "Copy constructor") );
        CLJNBPairs_exposer.def( bp::self != bp::self );
        { //::SireMM::CLJNBPairs::operator=
        
            typedef ::SireMM::CLJNBPairs & ( ::SireMM::CLJNBPairs::*assign_function_type)( ::SireMM::CLJNBPairs const & ) ;
            assign_function_type assign_function_value( &::SireMM::CLJNBPairs::operator= );
            
            CLJNBPairs_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >()
                , "" );
        
        }
        CLJNBPairs_exposer.def( bp::self == bp::self );
        { //::SireMM::CLJNBPairs::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireMM::CLJNBPairs::typeName );
            
            CLJNBPairs_exposer.def( 
                "typeName"
                , typeName_function_value
                , "" );
        
        }
        CLJNBPairs_exposer.staticmethod( "typeName" );
        CLJNBPairs_exposer.def( "__copy__", &__copy__);
        CLJNBPairs_exposer.def( "__deepcopy__", &__copy__);
        CLJNBPairs_exposer.def( "clone", &__copy__);
        CLJNBPairs_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireMM::CLJNBPairs >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        CLJNBPairs_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireMM::CLJNBPairs >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        CLJNBPairs_exposer.def( "__str__", &__str__< ::SireMM::CLJNBPairs > );
        CLJNBPairs_exposer.def( "__repr__", &__str__< ::SireMM::CLJNBPairs > );
    }

}
