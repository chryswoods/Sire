// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "BooleanProperty.pypp.hpp"

namespace bp = boost::python;

#include "SireBase/booleanproperty.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "booleanproperty.h"

#include "booleanproperty.h"

SireBase::BooleanProperty __copy__(const SireBase::BooleanProperty &other){ return SireBase::BooleanProperty(other); }

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

void register_BooleanProperty_class(){

    { //::SireBase::BooleanProperty
        typedef bp::class_< SireBase::BooleanProperty, bp::bases< SireBase::Property > > BooleanProperty_exposer_t;
        BooleanProperty_exposer_t BooleanProperty_exposer = BooleanProperty_exposer_t( "BooleanProperty", "This class provides a thin Property wrapper around bools\n\nAuthor: Christopher Woods\n", bp::init< >("Constructor - this constructs the integer 0") );
        bp::scope BooleanProperty_scope( BooleanProperty_exposer );
        BooleanProperty_exposer.def( bp::init< bool >(( bp::arg("value") ), "Construct from the passed boolean") );
        BooleanProperty_exposer.def( bp::init< SireBase::VariantProperty const & >(( bp::arg("other") ), "Construct from a VariantProperty") );
        BooleanProperty_exposer.def( bp::init< SireBase::BooleanProperty const & >(( bp::arg("other") ), "Copy constructor") );
        BooleanProperty_exposer.def( bp::self != bp::self );
        { //::SireBase::BooleanProperty::operator=
        
            typedef ::SireBase::BooleanProperty & ( ::SireBase::BooleanProperty::*assign_function_type)( ::SireBase::BooleanProperty const & ) ;
            assign_function_type assign_function_value( &::SireBase::BooleanProperty::operator= );
            
            BooleanProperty_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >()
                , "" );
        
        }
        BooleanProperty_exposer.def( bp::self == bp::self );
        { //::SireBase::BooleanProperty::toString
        
            typedef ::QString ( ::SireBase::BooleanProperty::*toString_function_type)(  ) const;
            toString_function_type toString_function_value( &::SireBase::BooleanProperty::toString );
            
            BooleanProperty_exposer.def( 
                "toString"
                , toString_function_value
                , "" );
        
        }
        { //::SireBase::BooleanProperty::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireBase::BooleanProperty::typeName );
            
            BooleanProperty_exposer.def( 
                "typeName"
                , typeName_function_value
                , "" );
        
        }
        { //::SireBase::BooleanProperty::value
        
            typedef bool ( ::SireBase::BooleanProperty::*value_function_type)(  ) const;
            value_function_type value_function_value( &::SireBase::BooleanProperty::value );
            
            BooleanProperty_exposer.def( 
                "value"
                , value_function_value
                , "Return this number cast as a double" );
        
        }
        BooleanProperty_exposer.staticmethod( "typeName" );
        BooleanProperty_exposer.def( "__copy__", &__copy__);
        BooleanProperty_exposer.def( "__deepcopy__", &__copy__);
        BooleanProperty_exposer.def( "clone", &__copy__);
        BooleanProperty_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireBase::BooleanProperty >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        BooleanProperty_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireBase::BooleanProperty >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        BooleanProperty_exposer.def( "__str__", &__str__< ::SireBase::BooleanProperty > );
        BooleanProperty_exposer.def( "__repr__", &__str__< ::SireBase::BooleanProperty > );
    }

}
