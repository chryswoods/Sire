// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "VariantProperty.pypp.hpp"

namespace bp = boost::python;

#include "SireError/errors.h"

#include "SireError/getbacktrace.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "property.h"

#include <QDebug>

#include <QMutex>

#include "property.h"

SireBase::VariantProperty __copy__(const SireBase::VariantProperty &other){ return SireBase::VariantProperty(other); }

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

void register_VariantProperty_class(){

    { //::SireBase::VariantProperty
        typedef bp::class_< SireBase::VariantProperty, bp::bases< SireBase::Property > > VariantProperty_exposer_t;
        VariantProperty_exposer_t VariantProperty_exposer = VariantProperty_exposer_t( "VariantProperty", "This is a simple property that holds any value as a QVariant. This\nis designed to be used for metadata that doesnt need any tight\nchecking (e.g. the author of the molecule file, the source of\nthe coordinates, the header lines etc.)\n\nAuthor: Christopher Woods\n", bp::init< >("Null constructor") );
        bp::scope VariantProperty_scope( VariantProperty_exposer );
        VariantProperty_exposer.def( bp::init< QVariant const & >(( bp::arg("value") ), "Construct a property equal to value") );
        VariantProperty_exposer.def( bp::init< SireBase::Property const & >(( bp::arg("other") ), "Copy constructor") );
        VariantProperty_exposer.def( bp::init< SireBase::VariantProperty const & >(( bp::arg("other") ), "Copy constructor") );
        VariantProperty_exposer.def( bp::self != bp::self );
        { //::SireBase::VariantProperty::operator=
        
            typedef ::SireBase::VariantProperty & ( ::SireBase::VariantProperty::*assign_function_type)( ::QVariant const & ) ;
            assign_function_type assign_function_value( &::SireBase::VariantProperty::operator= );
            
            VariantProperty_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("value") )
                , bp::return_self< >()
                , "" );
        
        }
        { //::SireBase::VariantProperty::operator=
        
            typedef ::SireBase::VariantProperty & ( ::SireBase::VariantProperty::*assign_function_type)( ::SireBase::VariantProperty const & ) ;
            assign_function_type assign_function_value( &::SireBase::VariantProperty::operator= );
            
            VariantProperty_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >()
                , "" );
        
        }
        VariantProperty_exposer.def( bp::self == bp::self );
        { //::SireBase::VariantProperty::toString
        
            typedef ::QString ( ::SireBase::VariantProperty::*toString_function_type)(  ) const;
            toString_function_type toString_function_value( &::SireBase::VariantProperty::toString );
            
            VariantProperty_exposer.def( 
                "toString"
                , toString_function_value
                , "String operator" );
        
        }
        { //::SireBase::VariantProperty::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireBase::VariantProperty::typeName );
            
            VariantProperty_exposer.def( 
                "typeName"
                , typeName_function_value
                , "" );
        
        }
        VariantProperty_exposer.staticmethod( "typeName" );
        VariantProperty_exposer.def( "__copy__", &__copy__);
        VariantProperty_exposer.def( "__deepcopy__", &__copy__);
        VariantProperty_exposer.def( "clone", &__copy__);
        VariantProperty_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireBase::VariantProperty >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        VariantProperty_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireBase::VariantProperty >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        VariantProperty_exposer.def( "__str__", &__str__< ::SireBase::VariantProperty > );
        VariantProperty_exposer.def( "__repr__", &__str__< ::SireBase::VariantProperty > );
    }

}
